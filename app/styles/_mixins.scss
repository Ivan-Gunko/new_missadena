
/* =========================================================================
  for @font-face included (only four formats: eot, woff, ttf and svg)
 ========================================================================= */
@mixin font-face($style-name, $file, $family, $category: "") {
    $filepath: "../fonts/" + $family + "/" + $file;
    // $filepath: "../fonts/" + $file;
    @font-face {
        font-family: "#{$style-name}";
        src: url($filepath + ".eot");
        src: url($filepath + ".eot?#iefix") format('embedded-opentype'), 
           url($filepath + ".woff") format('woff'), 
           url($filepath + ".ttf")  format('truetype'), 
           url($filepath + ".svg#" + $style-name + "") format('svg');
    }
    %#{$style-name} {
        font: {
            @if $category != "" {
                family: "#{$style-name}", #{$category};
            } @else {
                family: "#{$style-name}";
                weight: normal;
            }
        }
    }
}


/* ==============================================
                        BEM
 ============================================== */
@mixin element($element) {
    &__#{$element} {
        @content;
    }
}
@mixin modifier($modifier) {
    &--#{$modifier} {
        @content;
    }
}
@mixin e($element) {
    @include element($element)  {
        @content;
    }
}
@mixin m($modifier) {
    @include modifier($modifier) {
        @content;
    }
}


/* example bem */
/*.block {
    @include e('element') {
        color: #000000
    }
    @include m('modifier') {
        color: #000000;

        @include e('element') {
            color: #000000
        }
    }
}*/


/* ==============================================
                BACKGROUND GRADIENT
 ============================================== */
@function is-direction($value) {
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

    @return $is-keyword or $is-angle;
}

@function legacy-direction($value) {
    @if is-direction($value) == false {
        @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
    }

    $conversion-map: (
        to top          : bottom,
        to top right    : bottom left,
        to right top    : left bottom,
        to right        : left,
        to bottom right : top left,
        to right bottom : left top,
        to bottom       : top,
        to bottom left  : top right,
        to left bottom  : right top,
        to left         : right,
        to left top     : right bottom,
        to top left     : bottom right
    );

    @if map-has-key($conversion-map, $value) {
        @return map-get($conversion-map, $value);
    }

    @return 90deg - $value;
}

@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }

    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}


/* ==============================================
                    CLEARFIX
 ============================================== */
@mixin clearfix {
  // *zoom: 1;

  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}